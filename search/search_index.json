{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to mkdocs-versioning!</p> <p>mkdocs-versioning is a tool that allows you to version documentation built using mkdocs allowing users to access historical versions of documentation. mkdocs-versioning works by building each documentation version into its own folder and having a central, continuously updating <code>version selection page</code> which points to each version built. </p>"},{"location":"#design","title":"Design","text":"<p>mkdocs-versioning is designed with the following principles in mind:</p> <ol> <li>Theme/Plugin agnostic: The plugin should work with any mkdocs theme/plugin. The plugin works by taking advantage of the navigation links to implement versioning . </li> <li>Strict versioning: Once a documentation is built, it should NOT be overwritten. mkdocs-versioning uses a centralised, continuously updated version selection page which then, using the navigation links, point to built docs. The built docs then have a relative link which then points to the version selection page.</li> <li>Stateless: Stateless means that no extra information is stored anywhere in order for the plugin to work. All the plugin needs is the previously built docs, a new version number and it can build the new docs, the version selection page and have the previous verions of the built docs available and accessible.</li> </ol>"},{"location":"#install","title":"Install","text":"<p>It is highly recommended that you use Python Virtual Environments so not pollute your system install of Python. Once you create and activate your python environment, use <code>pip</code> to install the plugin. Requires Python version \u2265 3.6.</p> <pre><code>pip install mkdocs\npip install mkdocs-versioning\n</code></pre> Tip <p>An alternative for managing Virtual Environments is Anaconda Navigator which provides a nice GUI for managing python virtual environments.</p>"},{"location":"#setup","title":"Setup","text":"<p>Once install is complete, use <code>mkdocs new .</code> to create an empty mkdocs project. You should then have an <code>mkdocs.yml</code> file as well as a <code>docs/</code> directory. Now setup <code>mkdocs.yml</code> as shown below (Note: You can add more to the config if you wish. This is just the minimum):</p> Example <pre><code>plugins:\n- mkdocs-versioning:\n    version: 0.3.0\nnav:\n  - Home: \"index.md\"\n  - Version Selector: \"../\"\n</code></pre> <p>Write your documentation as normal using <code>mkdocs serve</code> to preview your docs as normal. When you run <code>mkdocs build</code>, the plugin will:</p> <ol> <li>Build your docs into a folder within <code>site/</code> and will be named according to the value of <code>version</code> (in the example, the docs will be built into <code>site/0.3.0/</code>).</li> <li>Remove the old version selection page.</li> <li>Inside <code>site/</code> build a new version selection page.</li> </ol> <p>Now when you want to build a new version, simply change the value of <code>version</code> (e.g. to 0.4.0) and build again, mkdocs should build the new, updated docs into its own folder and update the version selection page.</p> Info <p>This is just a basic working example, there is more functionality built into the docs such as a having a custom version selection page so it is recommended to read through the entire details section to get a full understanding of how the plugin works in order to take full advantage of the versioning capabilities.</p> <ul> <li>Adding 0.5.0 version</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This page contains common bugs that may occur and how to deal with them</p>"},{"location":"troubleshooting/#combined-use-of-awesome-pages-and-mkdocs-versioning","title":"Combined use of awesome-pages and mkdocs-versioning","text":"<p>In case of using awesome-pages the order of registration within the <code>plugins</code> is important. The following error may occur:</p> <pre><code>Traceback (most recent call last):\n  [...]\n  File \"/path/to/mkversion/entry.py\", line 47, on_config\n    for count, i in enumerate(nav):\nTypeError: 'NoneType' object is not iterable\n</code></pre> <p>You need to make sure, that the <code>awesome-pages</code> plugin is registered after <code>mkdocs-versioning</code>:</p> <pre><code>plugins:\n  - mkdocs-versioning:\n      version: \"1.0\"\n  - awesome-pages\n</code></pre>"},{"location":"reference/","title":"How it works","text":"<p>This page will describe how the plugin works by talking about the internal workings about the plugin. The following steps occur after a single <code>mkdocs build</code> command. </p>"},{"location":"reference/#1-building-the-main-docs","title":"1. Building the main docs","text":""},{"location":"reference/#11-pre-build","title":"1.1 Pre-build","text":"<p>The <code>main</code> documentation will be built into <code>site/</code> in a folder equivalent to the version value in <code>mkdocs.yml</code>. The documentation will have the version number of the docs appended to the <code>site_name</code> value specified in <code>mkdocs.yml</code>.</p> Example built docs directory. <p>For <code>version: 0.1.0</code>, the docs will be built in the directory <code>site/0.1.0/...</code>. The <code>...</code> means files (<code>CSS</code>, <code>JS</code>, <code>HTML</code>, etc) that are generated by mkdocs will be built into here.</p> <p>If a custom version selection page is specified, it is <code>hidden</code> by prefixing the filename with a <code>.</code> (<code>version_selection.md</code> \u2192 <code>.version_selection.md</code>). A custom version selection page can be specified as a plugin config option.</p> Example <code>mkdocs.yml</code> with custom version selection page. <pre><code>plugins:\n- mkdocs-versioning:\n    version: 0.3.0\n    version_selection_page: \"version_selection.md\"\nnav:\n  - Home: \"index.md\"\n  - Version Selector: \"../\"\n</code></pre>"},{"location":"reference/#post-build","title":"Post-build","text":"<p>Once the docs have been built into its folder in the <code>site</code> directory, the custom version selection page (if specified) will be <code>unhidden</code> by removing the prefixed <code>.</code> from the filename (<code>.version_selection.md</code> \u2192 <code>version_selection.md</code>).</p> Warning: Renaming files. <p>The process of hiding uses <code>Path.replace()</code> from the <code>pathlib</code> module in order to rename files. Should the renaming fail, you may have markdown files with <code>.</code> prefixed onto the filename. A CLI command <code>unhide_docs</code> will remove the prefixed <code>.</code> from your markdown files.  </p>"},{"location":"reference/#2-clearing-out-old-version-selection-page","title":"2. Clearing out old version selection page","text":"<p>The plugin then, in the <code>site</code> directory, removes all the files related to the version selection page. Since the built docs are in their own folders within the site directory, we can delete all the files in the root of the <code>site</code> directory, folders explicitly specified by the plugin as well as any user specified folders using the <code>exclude_from_nav</code> config option for the plugin. This option allows you to specify a list of directories the the plugin will ignore. This will then leave us with <code>site/</code> containing only folders named according to previous and current version numbers and in each folder, the previous and current built documentation.</p> Example <code>mkdocs.yml</code> with <code>exclude_from_nav</code> config option. <pre><code>plugins:\n- mkdocs-versioning:\n    version: 0.3.0\n    exclude_from_nav: [\"images\"]\nnav:\n  - Home: \"index.md\"\n  - Version Selector: \"../\"\n</code></pre>"},{"location":"reference/#21-why-exclude_from_nav-option","title":"2.1 Why <code>exclude_from_nav</code> option","text":"<p>mkdocs allows you have any files related to the building of the docs in the <code>docs</code> directory, this includes non-markdown files such as a folder containing images, stylesheets and more. The default behaviour of mkdocs is to copy these folders into the site directory where the built docs live. Since the building of the version selection page depends on the root of the <code>site</code> directory, you may have additional options (e.g. images, stylesheets) appearing in the version selection page. This option will exclude these options appearing on the version selection page as different versions of your documentation.  </p>"},{"location":"reference/#3-building-version-selection-page","title":"3. Building version selection page","text":"<p>Since we are building the version selection page, we <code>hide</code> all the other docs by prefixing the filename with a <code>.</code> as mentioned in Step 1.1. If a custom version selection markdown file is specified, we then unhide the version selection page and rename it to <code>index.md</code>. If a custom version selection markdown file is not specified, the plugin writes a basic version selection markdown file. </p> <p>After clearing the site directory, the only thing that should be left is a set of folders where each folder represents a different version. The folder names are used to create a <code>nav</code> in another separate <code>mkdocs.version.yml</code> file. <code>mkdocs build</code> is then triggered using the internal mkdocs API and the version selection page is then built into the root of the <code>site</code> directory.</p>"},{"location":"reference/#4-clean-up","title":"4. Clean up","text":"<p>Once the version selection page is built, the building of the docs is considered complete and all the <code>HTML</code>, <code>CSS</code> and <code>JS</code> has been generated. Since we hid the documentation in Step 3, we then unhide the docs with special handling for the version selection page. If a custom version selection markdown file is specified, we then rename the version selection page from <code>index.md</code> to whatever it was initially called. If a custom version selection markdown file is not specified, we then delete the version selection markdown file as it was generated by the plugin itself. </p>"},{"location":"reference/cli/","title":"CLI commands","text":"<p>This page will go into the available CLI commands that are available. Run <code>mkdocs-versioning -h</code> to access the built in help. </p>"},{"location":"reference/cli/#command-deploy","title":"Command: <code>deploy</code>","text":"<p>This is used to deploy built docs to GitHub Pages. mkdocs has a built in command for deploying to GitHub Pages but the mkdocs command performs a build before deploying to GitHubs pages which will fail if you have already built the latest version of your docs. Regardless, it is recommended to use <code>mkdocs-versioning deploy</code>.</p>"},{"location":"reference/cli/#command-sync","title":"Command: <code>sync</code>","text":"<p>Used to copy the built docs from GitHub pages (By default, the <code>gh-pages</code> branch).</p>"},{"location":"reference/cli/#command-unhide","title":"Command: <code>unhide</code>","text":"<p>If for whatever reason, during <code>mkdocs build</code>, it fails, you may have markdown files prefixed with a <code>*.*</code>, this command will remove all the <code>*.*</code> from all the markdown files (<code>.page.md</code> \u2192 <code>page.md</code>). </p>"},{"location":"reference/config_options/","title":"Config Options","text":"<p>This page will go into more detail on the available config options that this plugin provides. </p>"},{"location":"reference/config_options/#option-version","title":"Option: <code>version</code>","text":"<p>This is a REQUIRED option. This lets the plugin know what version the docs belong to. It is recommended that you use semantic versioning but any versioning scheme works. The versions are parsed as type <code>str</code> and is sorted alphabetically in descending order. </p> Example <code>mkdocs.yml</code> <pre><code>plugins:\n- mkdocs-versioning:\n    version: 0.3.0\n</code></pre>"},{"location":"reference/config_options/#option-exclude_from_nav","title":"Option: <code>exclude_from_nav</code>","text":"<p>This is a OPTIONAL option. This lets the plugin know what files to exclude from the navifation. The value should be a list of paths from the <code>docs</code> directory.</p> Example <code>mkdocs.yml</code> <pre><code>plugins:\n- mkdocs-versioning:\n    exclude_from_nav: [\"images\"]\n</code></pre>"},{"location":"reference/config_options/#option-version_selection_page","title":"Option: <code>version_selection_page</code>","text":"<p>This is a OPTIONAL option. This lets the plugin know if there is a custom version selection page and to use rather than the default. The markdown file should be located in the <code>docs</code> directory</p> Example <code>mkdocs.yml</code> <pre><code>plugins:\n- mkdocs-versioning:\n    version_selection_page: \"version_page.md\"\n</code></pre>"},{"location":"reference/config_options/#option-version_selector_title","title":"Option: <code>version_selector_title</code>","text":"<p>This is a ?? option.</p> Example <code>mkdocs.yml</code> <pre><code>plugins:\n- mkdocs-versioning:\n    version_selector_title: \"title\"\n</code></pre>"},{"location":"reference/step_by_step/","title":"How to Use","text":"<p>This page is intended to be a step by step walkthrough on how to use this plugin in a typical environment. This will go through all the available config options as well as CLI commands available when you install this plugin. </p>"},{"location":"reference/step_by_step/#version-010","title":"Version 0.1.0","text":"<p>Lets say, you are building a shape library. <code>version 0.1.0</code>  of the documentation is for circles. You want a custom version selection page and you have an <code>images</code> directory for images to be used for your docs which needs to be excluded from the version selection page nav (see here as to why). Your <code>mkdocs.yml</code> will look something like this:</p> Example <code>mkdocs.yml</code> for version 0.1.0 <pre><code>plugins:\n- mkdocs-versioning:\n    version: 0.1.0\n    exclude_from_nav: [\"images\"]\n    version_selection_page: \"version_selection.md\"\nnav:\n  - Home: \"index.md\"\n  - Circle: \"circle.md\"\n  - Version Selector: \"../\"\n</code></pre> <p>When you run <code>mkdocs build</code>, your <code>site</code> directory looks something like this:</p> Example <code>site</code> directory for version 0.1.0 <pre><code>.\n\u251c\u2500\u2500 0.1.0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 ...\n</code></pre> <p>You then deploy the built docs to GitHub Pages using the command <code>mkdocs-versioning deploy</code>. See here as to why this plugin has its own deploy command. </p> Warning <p>The <code>site</code> directory should NOT be pushed to any GIT remotes (e.g. GitHub, GitLab, BitBucket etc) and should be ignored using <code>.gitignore</code> file.</p>"},{"location":"reference/step_by_step/#version-020","title":"Version 0.2.0","text":"<p>The next version of the documentation you add documentation for triangles. The updated <code>mkdocs.yml</code> will look like the following:</p> Example <code>mkdocs.yml</code> for version 0.2.0 <pre><code>plugins:\n- mkdocs-versioning:\n    version: 0.2.0\n    exclude_from_nav: [\"images\"]\n    version_selection_page: \"version_selection.md\"\nnav:\n  - Home: \"index.md\"\n  - Circle: \"circle.md\"\n  - Triangle: \"triangle.md\"\n  - Version Selector: \"../\"\n</code></pre> <p>When you run <code>mkdocs build</code>, your <code>site</code> directory now looks something like this:</p> Example <code>site</code> directory for version 0.2.0 <pre><code>.\n\u251c\u2500\u2500 0.1.0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 0.2.0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 ...\n</code></pre> <p>You then deploy the built docs to GitHub Pages using the command <code>mkdocs-versioning deploy</code>. </p>"},{"location":"reference/step_by_step/#version-030","title":"Version 0.3.0","text":"<p>The next version of the documentation you add documentation for quadrilateral but, you move to a new computer You perform a <code>git clone</code> to get a local copy of the repository from your remote but your <code>site</code> directory is empty since the site is not pushed to the remote (and should not be). You can use <code>mkdocs-versioning sync</code> which will copy the built docs from GitHub Pages into your <code>site</code> directory. The <code>site</code> directory should look exactly the same as the example <code>site</code> directory for version 0.2.0. </p> <p>Once you have a copy of your built docs, your updated <code>mkdocs.yml</code> will look like the following:</p> Example <code>mkdocs.yml</code> for version 0.3.0 <pre><code>plugins:\n- mkdocs-versioning:\n    version: 0.3.0\n    exclude_from_nav: [\"images\"]\n    version_selection_page: \"version_selection.md\"\nnav:\n  - Home: \"index.md\"\n  - Circle: \"circle.md\"\n  - Triangle: \"triangle.md\"\n  - Quadrilateral: \"quadrilateral.md\n  - Version Selector: \"../\"\n</code></pre> <p>When you run <code>mkdocs build</code>, your <code>site</code> directory now looks something like this:</p> Example <code>site</code> directory for version 0.3.0 <pre><code>.\n\u251c\u2500\u2500 0.1.0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 0.2.0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 0.3.0\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 ...\n</code></pre> <p>You then deploy the built docs to GitHub Pages using the command <code>mkdocs-versioning deploy</code>.</p>"}]}